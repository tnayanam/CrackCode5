// O(N) provided if length is unknown

#include <iostream>
#include<unordered_map>

using namespace std;

class linklist
{
	struct Node
	{
		int data;
		Node *next;
	}*head;
	int count = 0;
public:
		linklist();
       	~linklist();
		void addElem(int num);
		void display();
		void findKthFromLast(int k);
		int traverse(Node *temp, int k);
};

linklist::linklist()
{
	head = NULL;
}

linklist::~linklist()
{

}

// add element to linklist
void linklist::addElem(int num)
{
	Node *temp = new Node;
	temp->data = num;
	temp->next = NULL;
	if (head == NULL)
		head = temp;
	else
	{
		temp->next = head;
		head = temp;
	}
}

// display
void linklist::display()
{
	Node *temp;
	temp = head;
	while (temp != NULL)
	{
		cout << temp->data << " "; 
		temp = temp->next;
	}

}

// recursively traverse
int linklist::traverse(Node *temp,int k)
{
	if (temp == NULL)
		return 0;
	count = traverse(temp->next,k) + 1;
	if (count == k)
		cout << temp->data;
	return count;
	
}


// find kth from last
void linklist::findKthFromLast(int k)
{
	Node *temp = head;
	traverse(temp,k);
}

int main()
{
	int ch = 1, k, num;
	bool operate = true;
	linklist l1;
	while (operate)
	{
		cout << "\n1. Add Element\n";
		cout << "2. enter the value of k";
		cout << "3. Display\n";
		cout << "4. Exit\n";
		cout << "4. Enter your choice:\n";
		cin >> ch;
		switch (ch)
		{
		case 1:
			cout << "Enter the number in the linklist\n";
			cin >> num;
			l1.addElem(num);
			break;
		case 2:
			cin >> k;
			l1.findKthFromLast(k);
			break;
		case 3:
			cout << "Displaying..\n";
			l1.display();
			break;
		case 4:
			operate = false;
			break;
		default:
			exit(0);
		}
	}

}